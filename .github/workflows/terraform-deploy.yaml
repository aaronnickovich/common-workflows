name: Terraform reusable workflow

on:
  workflow_call:
    inputs:
      env:
        required: true
        type: string
      AWS_REGION:
        required: true
        type: string
      TF_WORKSPACE:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ASSUME_ROLE:
        required: true

jobs:
  terraform-init:
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ inputs.TF_WORKSPACE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ inputs.AWS_REGION }}
      TF_VAR_assume_role:  ${{ secrets.AWS_ASSUME_ROLE }}

    steps:
    - id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1
      with:
        version: 2     # default

    - name: STS validate session info
      shell: bash
      run: |
        echo "AWS_ACCESS_KEY_ID = ${{ secrets.AWS_ACCESS_KEY_ID }}"
        echo "AWS Region = ${{ vars.AWS_REGION }}"
        aws --version
        aws sts get-caller-identity --region ${{ vars.AWS_REGION }}
        echo "-----------------------------------------------------"
        aws sts assume-role --role-arn ${{ secrets.AWS_ASSUME_ROLE }} --role-session-name DevopsAdmin-Session --output json >/dev/null 2>&1
        echo "-----------------------------------------------------"

    - name: Checkout
      uses: actions/checkout@v3.5.3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.8.5
    
    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: latest

    - name: Terraform init
      id: init
      shell: bash
      env:
        TF_WORKSPACE: "default"
        # TF_LOG: DEBUG
      run: |
        terraform workspace list
        cd terraform
        terraform init -input=false
        echo "TF Provider now initialized"
        echo "-------------------------------------->>>>>>"

    - name: Terraform format
      id: fmt
      shell: bash
      run: |
        cd terraform
        terraform fmt

    - name: Terraform validate
      id: validate
      shell: bash
      run: |
        cd terraform
        terraform validate

    - name: Terraform plan and OPA Check
      id: OPA
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        cd terraform
        terraform plan --out tfplan.binary
        terraform show -json tfplan.binary > tfplan.json
        opa eval --format pretty --bundle ..\policy\ --input tfplan.json "data.terraform.analysis.allow"
        allow_check() {
          if ! opa eval --format pretty --bundle ../policy/ --input tfplan.json "data.terraform.analysis.allow" | grep -q "true"; then
            exit 1
          fi
        }
        allow_check
      continue-on-error: false

    - name: Terraform apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd terraform
        terraform apply -input=false -auto-approve
      continue-on-error: false
